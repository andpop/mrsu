В JavaScript есть объекты, но они не похожи на объекты, которые мы привыкли видеть в объектно-ориентированных языках программирования типа Java или C++. Все свойства объекта в JavaScript открыты, а сами объекты не принадлежат никакому классу, кроме Object. Не понятно, как реализовать методы, классы и наследование.
Но все это можно устроить в JavaScript, и в этой главе показано, как именно.  В современных версиях JavaScript имеется синтаксис для объявления классов, внешне очень похожих на классы в Java, хотя внутренний механизм совершенно иной. Необходимо понимать, что творится под капотом. Поэтому я сначала покажу, как объявлять методы и функции-конструкторы вручную, а потом мы посмотрим, как эти конструкции отображаются на синтаксис классов.

1. Можно работать с объектами, не объявляя предварительно классы.


В языке JavaScript вызываемая функция будет иметь собственный контекст лишь в трёх случаях:
1. Функция вызывается в виде метода объекта, то есть через точку или квадратные скобки (например, a.f() или a['f']()).
2. Для вызова функции используется метод bind, call или apply.
3. Функция вызывается с помощью ключевого слова new.

В остальных случаях контекст сбрасывается на внешний блок.


Пять золотых правил безопасного программирования на JavaScript:
1. При объявлении переменных употребляйте ключевые слова let или const, а не var.
2. Пользуйтесь строгим режимом.
3. Обращайте внимание на типы и избегайте автоматического преобразования типов.
4. Разберитесь, что такое прототипы, но для работы с классами, конструкторами и методами применяйте современный синтаксис.
5. Не используйте ключевое слово this вне конструкторов и методов. Чтобы избежать неприятностей, не используйте this внутри функций, определенных с помощью ключевого слова function.  Безопасно использовать this в методах и конструкторах, а также в стрелочных функциях, определенных внутри методов и конструкторов.



